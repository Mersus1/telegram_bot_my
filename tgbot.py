import telebot
from telebot import types
import requests
import sqlite3
import threading
from datetime import datetime
import time

# üî• –¢–í–û–ò –¢–û–ö–ï–ù–´ üî•
BOT_TOKEN = "7941022207:AAGXKVcABZlMItti0sz7KoWhi7NCgnGXPU0"
WEATHER_API_KEY = "f6dae385f5a3d00f4834cf4d5669cca0"
bot = telebot.TeleBot(BOT_TOKEN)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
conn = sqlite3.connect("reminders.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS reminders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    text TEXT
)
""")
conn.commit()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_cities = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üå§ –ü–æ–≥–æ–¥–∞", "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "üì∑ –ú–æ–π Instagram")
    return kb

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def add_reminder(user_id, text):
    cursor.execute("INSERT INTO reminders (user_id, text) VALUES (?, ?)", (user_id, text))
    conn.commit()

def get_reminders(user_id):
    cursor.execute("SELECT text FROM reminders WHERE user_id = ?", (user_id,))
    return cursor.fetchall()

def delete_reminder(user_id):
    cursor.execute("DELETE FROM reminders WHERE user_id = ?", (user_id,))
    conn.commit()

def reminder_checker():
    while True:
        users = cursor.execute("SELECT DISTINCT user_id FROM reminders").fetchall()
        for user in users:
            user_id = user[0]
            reminders = get_reminders(user_id)
            for reminder in reminders:
                bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder[0]}")
        time.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å

threading.Thread(target=reminder_checker, daemon=True).start()

# –ü–æ–≥–æ–¥–∞
def get_weather(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url).json()
    if response.get("main"):
        temp = response["main"]["temp"]
        desc = response["weather"][0]["description"]
        return f"üåç –ì–æ—Ä–æ–¥: {city}\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {desc.capitalize()}"
    return "‚ö†Ô∏è –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."

# –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

@bot.message_handler(func=lambda msg: msg.text == "üå§ –ü–æ–≥–æ–¥–∞")
def ask_city(message):
    bot.send_message(message.chat.id, "üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")

@bot.message_handler(func=lambda message: message.text and message.text.strip().isalpha())
def send_weather(message):
    city = message.text.strip()
    user_cities[message.chat.id] = city
    bot.send_message(message.chat.id, get_weather(city))

@bot.message_handler(func=lambda msg: msg.text == "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
def reminder_prompt(message):
    bot.send_message(message.chat.id, "–ß—Ç–æ —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å? –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.")

@bot.message_handler(func=lambda message: message.text and message.text not in ["üå§ –ü–æ–≥–æ–¥–∞", "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "üì∑ –ú–æ–π Instagram"])
def set_reminder(message):
    add_reminder(message.chat.id, message.text)
    bot.send_message(message.chat.id, f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å: \"{message.text}\"")

@bot.message_handler(func=lambda msg: msg.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
def cancel_reminder(message):
    delete_reminder(message.chat.id)
    bot.send_message(message.chat.id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ!")

@bot.message_handler(func=lambda msg: msg.text == "üì∑ –ú–æ–π Instagram")
def instagram_link(message):
    bot.send_message(message.chat.id, "üì∑ –ú–æ–π Instagram: [—Ç—ã–∫](https://www.instagram.com)", parse_mode="Markdown")

@bot.message_handler(content_types=["photo"])
def get_photo(message):
    bot.reply_to(message, "–ß—Ç–æ –∑–∞ –¥–µ—Ä—å–º–æ? üòÇ")

bot.polling(none_stop=True)