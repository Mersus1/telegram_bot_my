import telebot
from telebot import types
import requests
import sqlite3
import threading
from datetime import datetime
import time

# üî• –¢–í–û–ò –¢–û–ö–ï–ù–´ üî•
BOT_TOKEN = "7941022207:AAGXKVcABZlMItti0sz7KoWhi7NCgnGXPU0"
WEATHER_API_KEY = "f6dae385f5a3d00f4834cf4d5669cca0"

bot = telebot.TeleBot(BOT_TOKEN)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
conn = sqlite3.connect("reminders.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS reminders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    text TEXT,
    time TEXT,
    repeat INTEGER
)
""")
conn.commit()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_cities = {}

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(types.KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞"), types.KeyboardButton("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"))

### --- –§–£–ù–ö–¶–ò–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô --- ###
def add_reminder(user_id, text, time, repeat):
    cursor.execute("INSERT INTO reminders (user_id, text, time, repeat) VALUES (?, ?, ?, ?)", (user_id, text, time, repeat))
    conn.commit()

def get_reminders():
    cursor.execute("SELECT * FROM reminders")
    return cursor.fetchall()

def delete_reminder(user_id):
    cursor.execute("DELETE FROM reminders WHERE user_id = ?", (user_id,))
    conn.commit()

def reminder_checker():
    while True:
        now = datetime.now().strftime("%H:%M")
        reminders = get_reminders()
        
        for reminder in reminders:
            rem_id, user_id, text, time, repeat = reminder

            # –†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            if time == now:
                bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
                cursor.execute("DELETE FROM reminders WHERE id = ?", (rem_id,))
                conn.commit()

            # –ö–∞–∂–¥—ã–π —á–∞—Å (–Ω–∞ 0-–π –º–∏–Ω—É—Ç–µ)
            elif repeat == 1 and datetime.now().minute == 0:
                bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–∫–∞–∂–¥—ã–π —á–∞—Å): {text}")

            # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å (–≤ 09:00)
            elif repeat == 2 and datetime.now().hour == 9 and datetime.now().minute == 0:
                bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å): {text}")

        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=reminder_checker, daemon=True).start()

### --- –§–£–ù–ö–¶–ò–ò –ü–û–ì–û–î–´ --- ###
def get_weather(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url).json()
    if response.get("main"):
        temp = response["main"]["temp"]
        desc = response["weather"][0]["description"]
        return f"üåç –ì–æ—Ä–æ–¥: {city}\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {desc.capitalize()}"
    else:
        return "‚ö†Ô∏è –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."

### --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î --- ###
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

@bot.message_handler(func=lambda message: message.text == "üå§ –ü–æ–≥–æ–¥–∞")
def ask_city(message):
    if message.chat.id in user_cities:
        bot.send_message(message.chat.id, f"–ò—Å–ø–æ–ª—å–∑—É—é —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≥–æ—Ä–æ–¥: {user_cities[message.chat.id]}")
        bot.send_message(message.chat.id, get_weather(user_cities[message.chat.id]))
    else:
        bot.send_message(message.chat.id, "üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")

@bot.message_handler(func=lambda message: message.text == "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
def reminder_prompt(message):
    bot.send_message(message.chat.id, "–ß—Ç–æ —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ù–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ 18:30')")

@bot.message_handler(func=lambda message: "–Ω–∞–ø–æ–º–Ω–∏" in message.text.lower())
def set_reminder(message):
    try:
        text = message.text.lower().replace("–Ω–∞–ø–æ–º–Ω–∏", "").strip()

        # –†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–≤ 18:30")
        if "–≤ " in text:
            parts = text.split(" –≤ ")
            reminder_text = parts[0].strip()
            reminder_time = parts[1].strip()
            add_reminder(message.chat.id, reminder_text, reminder_time, 0)
            bot.send_message(message.chat.id, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: \"{reminder_text}\" –≤ {reminder_time}")

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å
        elif "–∫–∞–∂–¥—ã–π —á–∞—Å" in text:
            add_reminder(message.chat.id, text.replace("–∫–∞–∂–¥—ã–π —á–∞—Å", "").strip(), "00:00", 1)
            bot.send_message(message.chat.id, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å **–∫–∞–∂–¥—ã–π —á–∞—Å**!")

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        elif "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å" in text:
            add_reminder(message.chat.id, text.replace("–∫–∞–∂–¥—ã–π –¥–µ–Ω—å", "").strip(), "00:00", 2)
            bot.send_message(message.chat.id, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å **–∫–∞–∂–¥—ã–π –¥–µ–Ω—å**!")

        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: –ù–∞–ø–æ–º–Ω–∏ [—Ç–µ–∫—Å—Ç] –≤ [–≤—Ä–µ–º—è]. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ù–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å —Ö–ª–µ–± –≤ 15:00'.")

    except IndexError:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: –ù–∞–ø–æ–º–Ω–∏ [—Ç–µ–∫—Å—Ç] –≤ [–≤—Ä–µ–º—è] –∏–ª–∏ '–∫–∞–∂–¥—ã–π —á–∞—Å'.")

@bot.message_handler(commands=["–æ—Ç–º–µ–Ω–∏—Ç—å"])
def cancel_reminder(message):
    delete_reminder(message.chat.id)
    bot.send_message(message.chat.id, "‚ùå –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã!")

@bot.message_handler(content_types=["text"])
def send_weather(message):
    if message.text.strip().isalpha():
        user_cities[message.chat.id] = message.text
        bot.send_message(message.chat.id, get_weather(message.text))
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –±—É–∫–≤–∞–º–∏.")

@bot.message_handler(content_types=["photo"])
def get_photo(message):
    bot.reply_to(message, "–ß—Ç–æ –∑–∞ –¥–µ—Ä—å–º–æ? üòÇ")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)